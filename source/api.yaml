- type: package
  name: core
  members:
    - type: module
      name: lambda
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.0.0
        Repository: https://github.com/folktale/core.lambda
        Bug Tracker: https://github.com/folktale/core.lambda/issues
      synopsis: >-
        Core combinators and higher-order functions.
      platform: ECMAScript 5
      members:
        - type: function
          name: identity
          header: identity(a)
          signature: |
            α → α
          meta:
            returns: "The argument it's given."
          synopsis: |
            The identity combinator. Always returns the argument it's given.

        - type: function
          name: constant
          header: constant(a, b)
          signature: |
            α → β → α
          meta:
            returns: "The first argument it's given."
          synopsis: |
            The constant combinator. Always returns the first argument it's given.

        - type: function
          name: apply
          header: apply(f, a)
          signature: |
            (α → β) → α → β
          meta:
            returns: "The result of applying ``f`` to ``a``."
          synopsis: |
            Applies a function to an argument.

        - type: function
          name: flip
          header: flip(f)
          signature: |
            (α → β → γ) → (β → α → γ)
          meta:
            returns: "The function ``f`` with parameters inverted."
          synopsis: |
            Inverts the order of the parameters of a binary function.

        - type: function
          name: compose
          header: compose(f, g)
          signature: |
            (β → γ) → (α → β) → (α → γ)
          meta:
            returns: "A composition of ``f`` and ``g``."
          synopsis: |
            Composes two functions together.

        - type: function
          name: curry
          header: curry(n, f)
          signature: |
            ₙ:Number → (α₁, α₂, ..., αₙ → β) → (α₁ → α₂ → ... → αₙ → β)
          meta:
            returns: "A curried version of ``f``, up to ``n`` arguments."
          synopsis: |
            Transforms any function on tuples into a curried function.

        - type: function
          name: spread
          header: spread(f, xs)
          signature: |
            (α₁ → α₂ → ... → αₙ → β) → (#[α₁, α₂, ..., αₙ] → β)
          meta:
            returns: "The result of applying the function ``f`` to arguments ``xs``."
          synopsis: |
            Applies a list of arguments to a curried function.

        - type: function
          name: uncurry
          header: uncurry(f)
          signature: |
            (α₁ → α₂ → ... → αₙ → β) → (α₁, α₂, ..., αₙ → β)
          meta:
            returns: "A function on tuples."
          synopsis: |
            Transforms a curried function into a function on tuples.

        - type: function
          name: upon
          header: upon(f, g)
          signature: |
            (β → β → γ) → (α → β) → (α → α → γ)
          meta:
            returns: "A binary function ``f`` with arguments transformed by ``g``."
          synopsis: |
            Applies an unary function to both arguments of a binary function.
        
    - type: module
      name: arity
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.0.0
        Repository: https://github.com/folktale/core.arity
        Bug Tracker: https://github.com/folktale/core.arity/issues
      synopsis: >-
        Restricts the arity of variadic functions.
      platform: ECMAScript 5
      members:
        - type: function
          name: nullary
          header: nullary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (Unit → β)
          meta:
            returns: "A function that takes no arguments."
          synopsis: |
            Restricts a variadic function to a nullary one.

        - type: function
          header: unary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (α₁ → β)
          meta:
            returns: "A function that takes one argument."
          synopsis: |
            Restricts a variadic function to an unary one.

        - type: function
          header: binary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (α₁ → α₂ → β)
          meta:
            returns: "A function that takes two arguments."
          synopsis: |
            Restricts a variadic function to a binary one.

        - type: function
          header: ternary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (α₁ → α₂ → α₃ → β)
          meta:
            returns: "A function that takes three arguments."
          synopsis: |
            Restricts a variadic function to a ternary one.

