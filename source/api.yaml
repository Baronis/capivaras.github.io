- type: package
  name: core
  members:
    - type: module
      name: lambda
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.0.0
        npm package: "``core.lambda``"
        Repository: https://github.com/folktale/core.lambda
        Bug Tracker: https://github.com/folktale/core.lambda/issues
      synopsis: >-
        Core combinators and higher-order functions.
      platform: ECMAScript 5
      members:
        - type: function
          name: identity
          header: identity(a)
          signature: |
            α → α
          meta:
            returns: "The argument it's given."
          synopsis: |
            The identity combinator. Always returns the argument it's given.

        - type: function
          name: constant
          header: constant(a, b)
          signature: |
            α → β → α
          meta:
            returns: "The first argument it's given."
          synopsis: |
            The constant combinator. Always returns the first argument it's given.

        - type: function
          name: apply
          header: apply(f, a)
          signature: |
            (α → β) → α → β
          meta:
            returns: "The result of applying ``f`` to ``a``."
          synopsis: |
            Applies a function to an argument.

        - type: function
          name: flip
          header: flip(f)
          signature: |
            (α → β → γ) → (β → α → γ)
          meta:
            returns: "The function ``f`` with parameters inverted."
          synopsis: |
            Inverts the order of the parameters of a binary function.

        - type: function
          name: compose
          header: compose(f, g)
          signature: |
            (β → γ) → (α → β) → (α → γ)
          meta:
            returns: "A composition of ``f`` and ``g``."
          synopsis: |
            Composes two functions together.

        - type: function
          name: curry
          header: curry(n, f)
          signature: |
            ₙ:Number → (α₁, α₂, ..., αₙ → β) → (α₁ → α₂ → ... → αₙ → β)
          meta:
            returns: "A curried version of ``f``, up to ``n`` arguments."
          synopsis: |
            Transforms any function on tuples into a curried function.

        - type: function
          name: spread
          header: spread(f, xs)
          signature: |
            (α₁ → α₂ → ... → αₙ → β) → (#[α₁, α₂, ..., αₙ] → β)
          meta:
            returns: "The result of applying the function ``f`` to arguments ``xs``."
          synopsis: |
            Applies a list of arguments to a curried function.

        - type: function
          name: uncurry
          header: uncurry(f)
          signature: |
            (α₁ → α₂ → ... → αₙ → β) → (α₁, α₂, ..., αₙ → β)
          meta:
            returns: "A function on tuples."
          synopsis: |
            Transforms a curried function into a function on tuples.

        - type: function
          name: upon
          header: upon(f, g)
          signature: |
            (β → β → γ) → (α → β) → (α → α → γ)
          meta:
            returns: "A binary function ``f`` with arguments transformed by ``g``."
          synopsis: |
            Applies an unary function to both arguments of a binary function.
        
    - type: module
      name: arity
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.0.0
        npm package: "``core.arity``"
        Repository: https://github.com/folktale/core.arity
        Bug Tracker: https://github.com/folktale/core.arity/issues
      synopsis: >-
        Restricts the arity of variadic functions.
      platform: ECMAScript 5
      members:
        - type: function
          name: nullary
          header: nullary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (Unit → β)
          meta:
            returns: "A function that takes no arguments."
          synopsis: |
            Restricts a variadic function to a nullary one.

        - type: function
          name: unary
          header: unary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (α₁ → β)
          meta:
            returns: "A function that takes one argument."
          synopsis: |
            Restricts a variadic function to an unary one.

        - type: function
          name: binary
          header: binary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (α₁ → α₂ → β)
          meta:
            returns: "A function that takes two arguments."
          synopsis: |
            Restricts a variadic function to a binary one.

        - type: function
          name: ternary
          header: ternary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (α₁ → α₂ → α₃ → β)
          meta:
            returns: "A function that takes three arguments."
          synopsis: |
            Restricts a variadic function to a ternary one.


    - type: module
      name: operators
      meta:
        Stability: 1 - Experimental
        Portability: Portable
        Version: 1.0.0
        npm package: "``core.operators``"
        Repository: https://github.com/folktale/core.operators
        Bug Tracker: https://github.com/folktale/core.operators/issues
      synopsis: >-
        Provides JS operators as curried functions.
      platform: ECMAScript 5
      members:
        - type: function
          category: Arithmetic
          name: add
          header: add(a, b)
          signature: |
            Number → Number → Number
          synopsis: |
            JavaScript's addition (``a + b``) operator.

        - type: function
          category: Arithmetic
          name: subtract
          header: subtract(a, b)
          signature: |
            Number → Number → Number
          synopsis: |
            JavaScript's subtraction (``a - b``) operator.

        - type: function
          category: Arithmetic
          name: divide
          header: divide(a, b)
          signature: |
            Number → Number → Number
          synopsis: |
            JavaScript's division (``a / b``) operator.

        - type: function
          category: Arithmetic
          name: multiply
          header: multiply(a, b)
          signature: |
            Number → Number → Number
          synopsis: |
            JavaScript's multiplication (``a * b``) operator.

        - type: function
          category: Arithmetic
          name: modulus
          header: modulus(a, b)
          signature: |
            Number → Number → Number
          synopsis: |
            JavaScript's modulus (``a % b``) operator.

        - type: function
          category: Arithmetic
          name: negate
          header: negate(a)
          signature: |
            Number → Number
          synopsis: |
            JavaScript's unary negation (``-a``) operator.

        - type: function
          category: Arithmetic
          name: increment
          header: increment(a)
          signature: |
            Number → Number
          synopsis: |
            Short for ``add(1)(a)``.
          seealso:
            - core.operators.add

        - type: function
          category: Arithmetic
          name: decrement
          header: decrement(a)
          signature: |
            Number → Number
          synopsis: |
            Short for ``subtract(a)(1)``.
          seealso:
            - core.operators.subtract

        # Logical operators
        - type: function
          category: Logical
          name: not
          header: not(a)
          signature: |
            Boolean → Boolean
          synopsis: |
            Logical negation (``!a``).

        - type: function
          category: Logical
          name: and
          header: and(a, b)
          signature: |
            Boolean → Boolean → Boolean
          synopsis: |
            Logical conjunction (``a && b``).

        - type: function
          category: Logical
          name: or
          header: or(a, b)
          signature: |
            Boolean → Boolean → Boolean
          synopsis: |
            Logical disjunction (``a || b``).

        # Bitwise operators
        - type: function
          category: Bitwise
          name: bitNot
          header: bitNot(a)
          signature: |
            Int → Int
          synopsis: |
            Bitwise negation (``~a``)

        - type: function
          category: Bitwise
          name: bitAnd
          header: bitAnd(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Bitwise intersection (``a & b``)

        - type: function
          category: Bitwise
          name: bitOr
          header: bitOr(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Bitwise union (``a | b``)

        - type: function
          category: Bitwise
          name: bitXor
          header: bitXor(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Bitwise exclusive union (``a ^ b``)
            
        - type: function
          category: Bitwise
          name: bitShiftLeft
          header: bitShiftLeft(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Bitwise left shift (``a << b``)
            
        - type: function
          category: Bitwise
          name: bitShiftRight
          header: bitShiftRight(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Sign-propagating bitwise right shift (``a >> b``)
            
        - type: function
          category: Bitwise
          name: bitUnsignedShiftRight
          header: bitUnsignedShiftRight(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Zero-fill bitwise right shift (``a >>> b``)
            
        # Relational operators
        - type: function
          category: Relational
          name: equal
          header: equal(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Strict reference equality (``a === b``).

        - type: function
          category: Relational
          name: notEqual
          header: notEqual(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Strict reference inequality (``a !== b``).

        - type: function
          category: Relational
          name: greaterThan
          header: greaterThan(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Greater than (``a > b``).

        - type: function
          category: Relational
          name: greaterThanOrEqualTo
          header: greaterThanOrEqualTo(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Greater than or equal to (``a >= b``).
        
        - type: function
          category: Relational
          name: lessThan
          header: lessThan(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Less than (``a < b``).

        - type: function
          category: Relational
          name: lessThanOrEqualTo
          header: lessThanOrEqualTo(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Less than or equal to (``a <= b``).
        
        # Special
        - type: function
          category: Special
          name: get
          header: get(key, object)
          signature: |
            String → Object → α | Undefined
          synopsis: |
            Property accessor (``object[key]``).

        - type: function
          category: Special
          name: has
          header: has(key, object)
          signature: |
            String → Object → Boolean
          synopsis: |
            Tests the existence of a property in an object (``key in object``).

        - type: function
          category: Special
          name: isInstance
          header: isInstance(constructor, a)
          signature: |
            Function → Object → Boolean
          synopsis: |
            Instance check (``a instanceof constructor``).

        - type: function
          category: Special
          name: create
          header: create(constructor, ...args)
          signature: |
            (new(α₁, α₂, ..., αₙ) → β) → (α₁, α₂, ..., αₙ) → β)
          synopsis: |
            Constructs new objects (``new constructor(...args)``)

        - type: function
          category: Special
          name: typeOf
          header: typeOf(a)
          signature: |
            α → String
          synopsis: |
            Returns the internal type of the object (``typeof a``)
        
        - type: function
          category: Special
          name: classOf
          header: classOf(a)
          signature: |
            α → String
          synopsis: |
            Returns the internal ``[[Class]]`` of the object.

    # --
    - type: module
      name: check
      meta:
        Stability: 1 - Experimental
        Portability: Portable
        Version: 0.1.0
        npm package: "``core.check``"
        Repository: https://github.com/folktale/core.check
        Bug Tracker: https://github.com/folktale/core.check/issues
      synopsis: >-
        Interface checking for JS values.
      platform: ECMAScript 5
      members:
        - type: class
          category: Types and structures
          name: Violation
          signature: |
            type Violation = Tag(String, Any)
                           | Equality(Any, Any)
                           | Identity(Any, Any)
                           | Any(Array<Any>)
                           | All(Array<Any>)

            implements
              Equality, Extractor, Reflect, Cata, Semigroup, ToString
          synopsis: >-
            Represents a violation of an interface's constraint.
          members:
            - type: attribute
              category: Comparison and testing
              name: isTag
              signature: |
                @Violation => Boolean
              synopsis: |
                ``true`` is the Violation has a ``Tag`` tag.

            - type: attribute
              category: Comparison and testing
              name: isEquality
              signature: |
                @Violation => Boolean
              synopsis: |
                ``true`` is the Violation has an ``Equality`` tag.

            - type: attribute
              category: Comparison and testing
              name: isIdentity
              signature: |
                @Violation => Boolean
              synopsis: |
                ``true`` is the Violation has an ``Identity`` tag.

            - type: attribute
              category: Comparison and testing
              name: isAny
              signature: |
                @Violation => Boolean
              synopsis: |
                ``true`` is the Violation has an ``Any`` tag.

            - type: attribute
              category: Comparison and testing
              name: isAll
              signature: |
                @Violation => Boolean
              synopsis: |
                ``true`` is the Violation has an ``All`` tag.

            - type: method
              category: Comparison and testing
              name: equals
              header: equals(aViolation)
              signature: |
                @Violation => Violation → Boolean
              meta:
                returns: >-
                  ``true`` if both Violations have the same contents (by reference equality).

            - type: method
              category: Combining
              name: concat
              header: concat(aViolation)
              signature: |
                @Violation => Violation → Boolean
              meta:
                returns: >-
                  A Violation with the contents combined.
              synopsis: >-
                Combines the contents of two Violations.

            - type: method
              category: Converting
              name: toString
              header: toString()
              signature: |
                @Violation => Violation → Boolean
              meta:
                returns: A textual representation of the Violation.

            - type: method
              category: Transforming
              name: cata
              header: cata(aPattern)
              signature: |
                @Violation => { r | Pattern } → β
                where type Pattern {
                  Tag: (String, Any) → β,
                  Equality: (Any, Any) → β,
                  Identity: (Any, Any) → β,
                  Any: Array<Any> → β,
                  All: Array<Any> → β
                }
              meta:
                returns: The result of applying the right transformation to the Violation.
              synopsis: |
                Provides a crude form of pattern matching over the Violation ADT. Since
                Violation also implements the Extractor interface, you may choose to
                use the Sparkler Sweet.js macro instead for a more powerful form of
                pattern matching.
                
        - type: function
          category: Primitive validations
          name: Null
          header: Null(aValue)
          signature: |
            Any → Validation<Violation, Any>
          synopsis: >-
            An interface that matches only ``null`` values.

        - type: function
          category: Primitive validations
          name: Undefined
          header: Undefined(aValue)
          signature: |
            Any → Validation<Violation, Any>
          synopsis: >-
            An interface that matches only ``undefined`` values.

        - type: function
          category: Primitive validations
          name: Boolean
          header: Boolean(aValue)
          signature: |
            Any → Validation<Violation, Any>
          synopsis: >-
            An interface that matches only ``Boolean`` values.

        - type: function
          category: Primitive validations
          name: Number
          header: Number(aValue)
          signature: |
            Any → Validation<Violation, Any>
          synopsis: >-
            An interface that matches only ``Number`` values.

        - type: function
          category: Primitive validations
          name: String
          header: String(aValue)
          signature: |
            Any → Validation<Violation, Any>
          synopsis: >-
            An interface that matches only ``String`` values.

        - type: function
          category: Primitive validations
          name: Function
          header: Function(aValue)
          signature: |
            Any → Validation<Violation, Any>
          synopsis: >-
            An interface that matches only ``Function`` values.

        - type: function
          category: Primitive validations
          name: Array
          header: Array(aValue)
          signature: |
            Any → Validation<Violation, Any>
          synopsis: >-
            An interface that matches only ``Array`` values.

        - type: function
          category: Primitive validations
          name: Object
          header: Object(aValue)
          signature: |
            Any → Validation<Violation, Any>
          synopsis: >-
            An interface that matches only ``Object`` values.

        - type: function
          category: Primitive validations
          name: Any
          header: Any(aValue)
          signature: |
            Any → Validation<Violation, Any>
          synopsis: >-
            An interface that matches any values.

        # Dependent validations
        - type: function
          category: Dependent validations
          name: Value
          header: Value(expected)
          signature: |
            α → (α → Validation<Violation, α>)
          synopsis: >-
            An interface that matches the given value by structural equality.

        - type: function
          category: Dependent validations
          name: Identity
          header: Identity(expected)
          signature: |
            α → (α → Validation<Violation, α>)
          synopsis: >-
            An interface that matches the given value by reference equality.

        # Higher-order validations
        - type: function
          category: Higher-order validations
          name: Or
          header: Or(interfaces)
          signature: |
            Array<α → Validation<Violation, α>> → α → Validation<Violation, α>
          meta:
            returns: >-
              An interface that matches any of the given interfaces.

        - type: function
          category: Higher-order validations
          name: And
          header: And(interfaces)
          signature: |
            Array<α → Validation<Violation, α>> → α → Validation<Violation, α>
          meta:
            returns: >-
              An interface that matches only if all of the given interfaces match.

        - type: function
          category: Higher-order validations
          name: Seq
          header: Seq(interfaces)
          signature: |
            Array< α₁ → Validation<Violation, α₁>
                 , α₂ → Validation<Violation, α₂>
                 , ...
                 , αₙ → Validation<Violation, αₙ>>
            → Array<α₁, α₂, ..., αₙ>
            → Validation<Violation, Array<α₁, α₂, ..., αₙ>>
          meta:
            returns: >-
              An interface that matches an N-Tuple with the given interfaces.

        - type: function
          category: Higher-order validations
          name: ArrayOf
          header: ArrayOf(interface)
          signature: |
            (α → Validation<Violation, α>) → α → Validation<Violation, α>
          meta:
            returns: >-
              An interface that matches an Array with values matching the given interface.

        - type: function
          category: Higher-order validations
          name: ObjectOf
          header: ObjectOf(aPattern)
          signature: |
            Object<Validation<Violation, Any>> → Object<Any> → Validation<Violation, Object<Any>>
          meta:
            returns: >-
              An interface that matches an Object with the exact key/type mapping given.

        # Validating
        - type: function
          category: Validating interfaces
          name: assert
          header: assert(aValidation)
          signature: |
            Validation<Violation, α> → α :: throws
          meta:
            returns: >-
              The value, if no violations exist.
            raises: |
              - **TypeError** - If any violation exists.

    - type: module
      name: inspect
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.0.1
        npm package: "``core.inspect``"
        Repository: https://github.com/folktale/core.inspect
        Bug Tracker: https://github.com/folktale/core.inspect/issues
      synopsis: |
        Human-readable representations for built-in and custom objects.
      platform: ECMAScript 5
      signature: |
        Any → String
      members:
        - type: function
          name: show
          header: show(maxDepth, value)
          signature: |
            Number → Any → String
          meta:
            returns: A human-readable representation of the value.
          synopsis: |
            Provides a human-readable representation of built-in values, and custom
            values implementing the ``ToString`` interface.
            
        
        
      members: 
        